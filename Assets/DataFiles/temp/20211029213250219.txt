
            
            #const min_width = 1.
            #const min_depth = 1.
            #const min_height = 1.
            #const max_width = 50.
            #const max_depth = 50.
            #const max_height = 10.

            width(min_width..max_width).
            depth(min_depth..max_depth).
            height(min_height..max_height).
            block_types(grass;water;sand;food;resource;tree).

            three(-1;0;1).
            two(-1;1).
            1{block(XX,YY,ZZ,Type): height(YY), block_types(Type)}1 :- width(XX), depth(ZZ).
            :- block(XX,YY,ZZ,_), block(XX+Offset, Y2, ZZ,_), YY > Y2 + 1, two(Offset).
            :- block(XX,YY,ZZ,_), block(XX, Y2, ZZ+Offset,_), YY > Y2 + 1, two(Offset).

            :- block(XX,YY,ZZ,_), block(XX+O1,Y2,ZZ+O2,_),YY>Y2+2, two(O1),two(O2).

            
            %water must be adjacent to at least 2 water blocks
            :- block(XX,_,ZZ, water), Count = {
                                        block(XX-1,_,ZZ,water);
                                        block(XX+1,_,ZZ,water);
                                        block(XX,_,ZZ-1,water);
                                        block(XX,_,ZZ+1,water)
                                        }, Count < 2,
                                        XX > min_width-1, XX <= max_width, ZZ > min_depth-1, ZZ <= max_depth.

            %food is surrounded by only resources
            :- block(XX,_,ZZ,food), Count = {
                                        block(XX-1,_,ZZ,resource);
                                        block(XX+1,_,ZZ,resource);
                                        block(XX,_,ZZ-1,resource);
                                        block(XX,_,ZZ+1,resource)
                                        }, Count < 4,
                                        XX > min_width-1, XX <= max_width, ZZ > min_depth-1, ZZ <= max_depth.

            :- block(XX,_,ZZ,tree),not block(XX-1,_,ZZ,grass).
            :- block(XX,_,ZZ,tree),not block(XX+1,_,ZZ,grass).
            :- block(XX,_,ZZ,tree),not block(XX,_,ZZ-1,grass).
            :- block(XX,_,ZZ,tree),not block(XX,_,ZZ+1,grass).
                                        
                                      
                                        

            %resource block neighbouring food, random shape
            :-block(XX,YY,ZZ,resource), Count = {
                                        block(XX+1,Y2,ZZ,food);
                                        block(XX-1,Y2,ZZ,food);
                                        block(XX,Y2,ZZ-1,food);
                                        block(XX,Y2,ZZ+1,food);
                                        block(XX-1,Y2,ZZ+1,food);
                                        block(XX+1,Y2,ZZ+1,food);
                                        block(XX-1,Y2,ZZ-1,food);
                                        block(XX+1,Y2,ZZ-1,food)
                                        }, Count!=1,
                                        XX > min_width-1, XX <= max_width, ZZ > min_depth-1, ZZ <= max_depth.


            %water must be same height as adjecent water
            :- block(XX,YY,ZZ,water), block(XX-1, Y2, ZZ,water), YY != Y2.
            :- block(XX,YY,ZZ,water), block(XX+1, Y2, ZZ,water), YY != Y2.
            :- block(XX,YY,ZZ,water), block(XX, Y2, ZZ-1,water), YY != Y2.
            :- block(XX,YY,ZZ,water), block(XX, Y2, ZZ+1,water), YY != Y2.
            
            %water must be one block lower than a none water block
            :- block(XX,YY,ZZ,water), block(XX+Offset, Y2, ZZ, Type), Type != water, not YY < Y2, two(Offset).
            :- block(XX,YY,ZZ,water), block(XX, Y2, ZZ+Offset, Type), Type != water, not YY < Y2, two(Offset).

            non_food_types(water;sand;grass).
            :- Count = {block(_,_,_,Type)}, non_food_types(Type), Count == 0.

            %:- not block(_,min_height,_,_).
            %:- not block(_,max_height,_,_).


            %sand cannot be surrounded by grass
            :- block(XX,_,ZZ,sand), {block(XX-1,_,ZZ,grass); block(XX+1,_,ZZ,grass);block(XX,_,ZZ-1,grass);block(XX,_,ZZ+1,grass)}==4, XX > min_width, XX <= max_width, ZZ > min_depth, ZZ <= max_depth.

            %grass cannot be surrounded by sand
            :- block(XX,_,ZZ,grass), {block(XX-1,_,ZZ,sand); block(XX+1,_,ZZ,sand)}==2.
            :- block(XX,_,ZZ,grass), {block(XX,_,ZZ-1,sand);block(XX,_,ZZ+1,sand)}==2.
            
            %sand must have a water or sand neighbor
            sand_depth(1..3).
            :- block(XX,Y1,ZZ,sand), {block(XX-Depth,_,ZZ, water): sand_depth(Depth);
                                       
                                        block(XX+Depth,_,ZZ,water): sand_depth(Depth);
                                        block(XX,_,ZZ-Depth,water): sand_depth(Depth);
                                        block(XX,_,ZZ+Depth,water): sand_depth(Depth)} < 1,
                                        XX > min_depth, XX <= max_width, ZZ > min_depth, ZZ <= max_depth.

            %neghboring waters must not be grass
            :- block(XX,Y1,ZZ,water), block(XX-1,Y2,ZZ,grass).
            :- block(XX,Y1,ZZ,water), block(XX+1,Y2,ZZ,grass).
            :- block(XX,Y1,ZZ,water), block(XX,Y2,ZZ-1,grass).
            :- block(XX,Y1,ZZ,water), block(XX,Y2,ZZ+1,grass).

            :- block(XX,Y1,ZZ,water), block(XX-1,Y2,ZZ-1,grass).
            :- block(XX,Y1,ZZ,water), block(XX-1,Y2,ZZ+1,grass).

            :- block(XX,Y1,ZZ,water), block(XX+1,Y2,ZZ-1,grass).
            :- block(XX,Y1,ZZ,water), block(XX+1,Y2,ZZ+1,grass).

        block(130,4,81,water).
block(131,2,70,sand).
block(131,5,81,sand).
block(132,1,70,water).
block(132,4,81,sand).
block(133,1,70,water).
block(133,4,81,sand).
block(134,1,70,water).
block(134,3,81,water).
block(135,1,70,water).
block(135,3,81,water).
block(136,2,70,sand).
block(136,4,81,sand).
block(137,2,70,grass).
block(137,3,81,water).
block(138,3,70,grass).
block(138,3,81,water).
block(139,3,70,grass).
block(139,3,81,water).
block(140,3,70,grass).
block(140,3,81,water).
block(141,4,70,grass).
block(141,4,81,sand).
block(141,4,70,grass).
block(141,3,71,sand).
block(141,2,72,sand).
block(141,2,73,sand).
block(141,2,74,sand).
block(141,2,75,sand).
block(141,3,76,sand).
block(141,3,77,sand).
block(141,2,78,water).
block(141,2,79,water).
block(141,3,80,sand).
block(130,4,81,water).
block(141,4,81,sand).

:- {block(_,_,_,food)} > 0.
